# -*- coding: utf-8 -*-
"""CNN  Horse or Human Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rxq5wsvuFE1fOsNoRGAfA2hrV-m1Bl1z

### Horse or Human Classification using CNN
"""

#Load Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
import warnings
warnings.filterwarnings('ignore')
import keras

from keras.preprocessing.image import ImageDataGenerator
from keras.optimizers import Adam
from keras.callbacks import ModelCheckpoint
from keras.layers.normalization import BatchNormalization
from keras.regularizers import l2

"""Load Data"""

train_data_path ='/content/drive/MyDrive/horse-or-human/Dataset/train'
validation_data_path ='/content/drive/MyDrive/horse-or-human/Dataset/validation'

"""### Data Preprocessing"""

training_datagen=ImageDataGenerator(rescale=1./255,
                                   rotation_range=40,
                                    width_shift_range=0.2,
                                      height_shift_range=0.2,
                                      shear_range=0.2,
                                      zoom_range=0.2,
                                      horizontal_flip=True,
                                      fill_mode='nearest')

training_data=training_datagen.flow_from_directory(train_data_path,
                                                   target_size=(150, 150), 
                                      batch_size=32,
                                      class_mode='binary')

training_data.class_indices

valid_datagen = ImageDataGenerator(rescale=1./255)

valid_data =  valid_datagen.flow_from_directory(validation_data_path, 
                                      target_size=(150, 150), 
                                      batch_size=32,
                                      class_mode='binary')

"""### Building CNN Model"""

cnn_model=keras.models.Sequential([
                                   keras.layers.Conv2D(filters=32,kernel_size=3,input_shape=[150,150,3]),#Add First CNN Layer
                                   keras.layers.MaxPooling2D(pool_size=(2,2)), #Add First MaxPooling Layer

                                   keras.layers.Conv2D(filters=64,kernel_size=3),#Add Second CNN Layer
                                   keras.layers.MaxPooling2D(pool_size=(2,2)), #Add Second MaxPooling Layer

                                   keras.layers.Conv2D(filters=128,kernel_size=3),#Add Third CNN Layer
                                   keras.layers.MaxPooling2D(pool_size=(2,2)), #Add Third MaxPooling Layer

                                   keras.layers.Conv2D(filters=256,kernel_size=3),#Add Fourth CNN Layer
                                   keras.layers.MaxPooling2D(pool_size=(2,2)), #Add Fourth MaxPooling Layer

                                   keras.layers.Dropout(0.5),# Droupout Layers
                                   keras.layers.Flatten(),

                                   keras.layers.Dense(units=128,activation='relu'), # First Hidden Layer
                                   keras.layers.Dropout(0.1), # Droupout Layers

                                   keras.layers.Dense(units=256,activation='relu'), # Second Hidden Layer
                                   keras.layers.Dropout(0.25), # Droupout Layers

                                   keras.layers.Dense(units=2,activation='softmax') #Output Layer
                                   


])

# compile cnn model
cnn_model.compile(optimizer = Adam(learning_rate=0.001), loss='sparse_categorical_crossentropy', metrics=['accuracy'])

model_path='/content/drive/MyDrive/horse-or-human/horse_or_human_predictor.h5'
checkpoint=ModelCheckpoint(model_path,monitor='val_accuracy',verbose=1,save_best_only=True,mode='max')
callbacks_list=[checkpoint]

"""## Train CNN Model"""

history = cnn_model.fit(training_data, 
                          epochs=100, 
                          verbose=1, 
                          validation_data= valid_data,
                          callbacks=callbacks_list)

"""### **Import Model**"""

model_path='/content/drive/MyDrive/horse-or-human/horse_or_human_predictor.h5'

model = keras.models.load_model(model_path)

#horse image path
h1='/content/drive/MyDrive/horse-or-human/test_data/horse/1.jpg'
h2='/content/drive/MyDrive/horse-or-human/test_data/horse/2.jpg'
h3='/content/drive/MyDrive/horse-or-human/test_data/horse/3.jpeg'
h5='/content/drive/MyDrive/horse-or-human/test_data/horse/4.jpg'
h4='/content/drive/MyDrive/horse-or-human/test_data/horse/5.jpg'
#human image path
human1='/content/drive/MyDrive/horse-or-human/test_data/human/1.jpg'
human2='/content/drive/MyDrive/horse-or-human/test_data/human/2.jpg'
human3='/content/drive/MyDrive/horse-or-human/test_data/human/3.jpg'
human4='/content/drive/MyDrive/horse-or-human/test_data/human/4.jpg'
human5='/content/drive/MyDrive/horse-or-human/test_data/human/5.jpg'

import numpy as np
from keras.preprocessing import image

def pred_human_horse(model, horse_or_human):
  test_image = image.load_img(horse_or_human, target_size = (150, 150))
  test_image = image.img_to_array(test_image)/255
  test_image = np.expand_dims(test_image, axis = 0)

  result = model.predict(test_image).round(3)

  pred = np.argmax(result)
  print(result, "--->>>", pred)

  if pred == 0:
    print('Predicted>>> Horse')
  else:
    print('Predicted>>> Human')

"""### **Predict Output**"""

for horse_or_human in [h1,h2,h3,h4,h5,human1,human2,human3,human4,human5]:
  pred_human_horse(model, horse_or_human)

